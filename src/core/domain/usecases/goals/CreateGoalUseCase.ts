import { Goal } from '../../entities/goal/Goal';
import { IGoalRepository } from '../../repositories/goals/IGoalRepository';
import { GoalType } from '../../../../types/goal';
import { validateGoalData } from '../../../../lib/utils/validators';

export class CreateGoalUseCase {
  constructor(private readonly goalRepository: IGoalRepository) {}

  async execute(goalData: { type: GoalType; targetValue: number; deadline: Date; userId: string }): Promise<Goal> {
    try {
      // 1. Validate goal data
      const isValidGoalData = validateGoalData(goalData);
      if (!isValidGoalData) {
        throw new Error('Invalid goal data provided.');
      }

      // 2. Create a new goal entity
      const newGoal: Goal = {
        id: '', // Will be generated by the repository
        ...goalData,
        progress: 0, // Initial progress is 0
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      // 3. Save the goal to the repository
      const createdGoal = await this.goalRepository.save(newGoal);

      return createdGoal;
    } catch (error) {
      console.error('Error creating goal:', error);
      throw error;
    }
  }
}